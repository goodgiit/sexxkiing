# Chapter02-2
# 파이썬 완전 기초
# 파이썬 변수
# 변수-프로그램에 있어 어떤 문자나 숫자를 저장하는 공간 변할 수 있고 선언 후 바꿀 수 있다.

# 기본 선언
n=700

# 오른쪽에 있는 값을 왼쪽 변수에 할당
# 선언한 알파벳 n에 담아 놓는것을 변수에 값을 삽입한다 할당한다 라고 한다.
# 컴퓨터 내부적으로는 메모리 저장장치에 n이 있는 주소에 저장된다는 의미이며 또한 필요시 이 주소로 찾아갈 수 있다 ex (출력할때)

# 출력
print(n)
print(type(n))

# 이는 n이라는 변수에  할당되어있는 값에 해당되는 자료형을 보여준다 (int는 정수형)
print()


# 동시 선언

x = y = z =700

print(x,y,z)
print()


# 재선언 후 출력

var=75
var = "Change Value"

print(var)
print(type(var))

# 결과값을 통해 마지막에 선언된 값이 기존의 선언된 값을 재할당하게 된다. 즉 덮어쓰게 된다. (즉 str = 문자형의 자료형)
# 첫번째 선언의 자료형(데이터타입)은 정수형 두번쨰 선언의 자료형은 문자형
# 실수할수 잇기에 선언한 변수를 프로그램의 흐름이 끝날때까지  추적하는 것이 좋다
# 변수의 사전

# Object Reference = 파이썬 내부의 흐름 밑의 순서대로 작동

# 변수 값 할당 상태일 때

# 1. 타입에 맞는 오브젝트 생성
# 2. 값 생성
# 3. 콘솔 출력

# ex)1

print(300)
print(int(300)) # 이러한 형태가 오브젝트

# 내부적으로 일어나는 일을 순차적으로 정리해보면 300이라는 class의 int형 - 타입에 맞는 오브젝트 생성 300을 안에서 -- 값 생성 후  콘솔 출력
# 두 행들 중 위 행은 이러한 행위를 자동적으로 한 것이다.

# ex)2

n=777
print(n,type(n))
print()
# 777을 파이썬이 판단해 int형임을 알고 n에 할당 (값생성) 후 print문으로 출력

m=n
# m->777<-n

print(m, n) # 콤마(,) 뒤는 띄어쓰기를 해 주는 것이 좋다.
print(type(m), type(n))
print()

m=400 # m을 400으로재할당

print(m, n)
print(type(m), type(n))
print()

# id(identity)확인 : 객체의 고유값 확인

m=800

n=655

print(id(m))

print(id(n))

# type에 맞는 object의 고유값이 출력된다.
# m에 800이 할당되어 있는데 800자체는 id값을 기준으로 파이썬 내부에서 판단을 해서 그 id값을 가져온다

#여기서 둘의 고유값이 다른데 800과 655는 다른 수 이기 때문이다.

print(id(m)==id(n))

# 연산자 기호(==)를 통해 id(m) 과 id(n)의 값이 같은지 묻는 기능을 하고 있다. 800과 655는 다른 숫자이므로 False의 값이 나오게 된다.

# 같은 오브젝트 참조

m=800
n=800
z=800
i=800

print(id(m))
print(id(n))
print(id(m)==id(n))
print()

# 이 때는 mnzi의 값은 800으로 같다. 그리고 고유값도 같은데  파이썬 입장에서  m을 복사해서 써도 같은 값을 4개의 변수에서 할당해서 쓰는 것이 비효율적이라고 판단하기에 결국 파이썬(엔진)이 판단하게 4개의 변수는 똑같은 하나의 오브젝트(인스턴스)이다.
# 중복되는 코드 성능상에서 코드를 간결하게 해라 이런것들을 하나하나 최적화 시켜야 원활하고 빠른 프로그램 실행 흐름이 가능하기 때문이다.
# 어차피 재사용하거나 똑같은 값을 할당할 꺼면 파이썬은 내부에서 하나만 만들어진다.
# 다양한 변수 선언 (네이밍 규칙
# Camel Case : numberOfCollegeGraduates 이는 처음에는 소문자로 시작 연결되는 단어의 첫글자부터 (여기서는 'o', 'C', 'G') 대문자로 네이밍하는 방식 주로 Method를 주로  선언할 때 사용
# Pascal Case : NumberOfCollegeGraduates 이는 Camel Case와 비슷하지만 유일한 차이점은 처음의 문자가 대문자라는 점이다  이는 Class같은 것을 선언할 때 사용
# Snake Case : number_of_college_graduates 뱀처럼 이어지는 영단어를 밑줄로 연결 모두 소문자로 선언 주로 변수를 선언할 때 사용

# 허용하는 변수 선언 법

age=1
Age=2
aGe=3
AGE=4
a_g_e=5
_age=6
age_=7
_AGE_=7

# 모두 변수 선언 가능 그러나 숫자나 특수문자로 시작되는 변수는 에러가 발생 여기서 특수문자 ( _ , $ )는 제외
# 예약어는 변수명으로 불가능
# ex) for=3  , as=5 , class=7 모두 실행시 에러가 난다.
# python reserved words라고 구글링을 하면 예약어 리스트가 나온다.
# 원하는 어떤 오브젝트를 만들 때 그에 맞는 변수 네이밍이 필요
