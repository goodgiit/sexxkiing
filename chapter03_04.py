# Chapter03-4

# 파이썬 튜플

# 리스트형과의 비교 중요 둘 중 무엇을 쓸 지

# 튜플 자료형(순서O, 중복O, 수정 X, 삭제X) remove, del 슬라이싱 값 변경 insert 불가능 ( 리뮤테이블=불변)

# 튜플의 용도는 중요 데이터들이 있는데 한 번 저장되면 변경되면 안되는 것들



# 선언

a=() # tuple의 선언은 소괄호로 묶어주기

b=(1,2)

c=(1,) # tuple형으로 원소가 하나로이용할 땐 끝에 콤마를 넣어줘야 한다. 콤마가 없으면 int형으로 인식

print(type(a), type(b), type(c))

d=(11, 12, 13, 14)

e=(100, 1000, 'Ace', 'Base', 'Captine')

f=(100, 1000, ('Ace', 'Base', 'Captine'))  # tuple안에 tuple 가능

print()

# 인덱싱

print('e = ', e[1])

print('e = ', e[0]+e[1]+e[1])

print('e = ', e[-1])

print('e = ', f[-1])

print('e = ', f[-1][1])

# 리스트형의 인덱싱과 같다.

print('f = ', list(f[-1][1])) # tuple형을 list형으로 형 변환 따라서 리스트의 기능인 수정과 삭제가 가능해진다.

# 수정 X

# d[0] =1500으로 선언하고 실행 시 오류가 발생한다.

# 슬라이싱

print()

print('e = ', e[0:3])

print('e = ', e[2:])

print('f = ', f[2][1:3])

# 슬라이싱은 리스트에서의 슬라이싱과 같다

# tuple 연산

print()

print("c +d = ", c+d)

print('c * 3= ', c*3)

# 리스트형과 같은 결과가 나옴

# tuple 함수

a=(5, 2, 3, 1, 4)

print('a = ', a)

print('a = ', a.index(3))

# a 튜플형에서 3원소의 번호는 무엇인가?를 묻는 함수 원소 3은 2번이다.

print('a = ', a.count(2))

# count함수는 원소의 갯수를 묻는 함수 2라는 원소는 총 몇 개가 있는가 위에선 2라는 원소가 a 튜플형에서 몇개 있는가 총 1개 있다.

# 팩킹 & 언팩킹(Packing and Unpacking)

# 팩킹

t = ('foo', 'bar', 'baz', 'qux')

# 이 자연스러운 과정이 4개 원소를 하나로 묶었다. 이를 패킹이라고 볼 수있다.

print(t)

print(t[0])

print(t[-1])

# 하나로 묶었기 때문에 인덱스로 접근했을 때 하나의 원소 확인 가능

# 튜플을 선언하는게 패킹이다.

# 언팩킹1

(x1, x2, x3, x4) = t

print(type(x1), type(x2), type(x3), type(x4))

print(x1, x2, x3, x4)

# 4개의 원소가 각각 변수로 할당이 됬다. 묶여있던 원소 4개 순서대로 foo bar baz qux (4개의 원소 모두 문자형) x1 x2 x3 x4에 할당이 되었다. 이를 언팩킹이라 한다. 괄호가 없더라도 언팩킹이 이루어지지만  관례로 쳐야 한다.

# 팩킹 & 언팩킹

t2= 1, 2, 3 # 소괄호 없이도 튜플 선언 가능

t3=4, # 원소가 하나일 땐 꼭 콤마를 찍어 tuple

x1, x2, x3 = t2 # 언팩킹 이는 t2의 원소 1 2 3을 x1 x2 x3에 각각 할당한다는 의미이다.

x4, x5, x6=4, 5, 6 # 이 또한 언팩킹이다. 4 5 6을 x4 x5 x6에 각각 할당한다는 의미이다.

print(t2)

print(t3)

print(x1, x2, x3)

print(x4, x5, x6)
